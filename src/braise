#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""braise - a dynamic firewall

"""


import pickle
# Needed to access logging :
from systemd import journal
import select
#import putch
import datetime

# Needed to add/del services :
from servicewall import ServiceWall
from servicewall import network_helpers

# Needed to parse arguments :
import argparse


conf_dir = "/var/lib/servicewall/"
realm_defs_pickle = conf_dir + "realms.p"
service_defs_pickle = conf_dir + "services.p"
definitions_dir = "/etc/gufw/app_profiles"
program_name = "ServiceWall"

with open(realm_defs_pickle, "rb") as fd:
    realm_defs = pickle.load(fd)
with open(service_defs_pickle, "rb") as fd:
    service_defs = pickle.load(fd)


def print_dict(dictionary):
    for key, value in dictionary.items():
        if isinstance(value, dict):
            print("=> %s :" % key)
            print_dict(value)
        else:
            print("%s : %s" % (key, value))


if __name__ == "__main__":

    def no_arg_provided(args):
        parser.print_help()
        raise SystemExit("\n  argument needed !")

    def show_status(args):
        firewall = ServiceWall()
        firewall.list_services_in()

    def show_realms(args):
        print_dict(realm_defs)
    def show_services(args):
        for service in service_defs:
            print("%s - %s" % (service, service_defs[service]["description"]))
    def show_service(args):
        # The calling parser has nargs="*", so args.service_name is a list
        service_name = " ".join(args.service_name)
        # Do our own validity testing
        if service_name not in service_defs:
            parser_show_service.print_usage()
            raise KeyError('service "%s" not found. ')
        print_dict(service_defs[service_name])

    def add_service(args):
        # The calling parser has nargs="*", so args.service_name is a list
        service_name = " ".join(args.service_name)
        # Do our own validity testing
        if service_name not in service_defs:
            parser_show_service.print_usage()
            raise KeyError('service "%s" not found. ')
        essid = network_helpers.get_essid()
        if service_name in realm_defs[essid]:
            raise SystemExit("Service %s already in realm %s's definition" %
                    (service_name, essid))
        realm_defs[essid][service_name] = False
        with open(realm_defs_pickle, "wb") as fd:
            pickle.dump(realm_defs, fd)
        firewall = ServiceWall()
        firewall.add_service_in(args.service_name, local=False)
        print("Allowed %s to be served when in realm %s." % (service_name, essid))

    def del_service(args):
        # The calling parser has nargs="*", so args.service_name is a list
        service_name = " ".join(args.service_name)
        # Do our own validity testing
        if service_name not in service_defs:
            parser_show_service.print_usage()
            raise KeyError('service "%s" not found. ')
        essid = network_helpers.get_essid()
        if service_name in realm_defs[essid]:
            del realm_defs[essid][service_name]
        else:
            raise KeyError('service "%s" not allowed in realm %s anyway.'
                    % (service_name, essid))
        with open(realm_defs_pickle, "wb") as fd:
            pickle.dump(realm_defs, fd)
        firewall = ServiceWall()
        firewall.del_service_in(args.service_name)
        print("Removed %s from allowed services on realm %s." % (service_name, essid))

    def show_logs(args):
        if "period" in args:
            yielder = log_yielder(int(args.period))
        else:
            yielder = log_yielder()
        now = datetime.datetime.today()

        # log_folder is a dict that contains host adresses as keys,
        # and whose items are dicts that contain port numbers as keys,
        # and whose items are lists of logs, which are dicts.
        #
        # log_folder {
        #             "192.168.1.1": {
        #                             "22": {
        #                                    [log1, log2, ... ] }}}
        #
        # log1: {
        #         "DATE": datetime.timestamp, "SRC": "191.168.1.1", ... }

        log_folder = {}

        for log in yielder:
            if log["SRC"] not in log_folder:
                log_folder[log["SRC"]] = {}
            if "DPT" not in log:
                log["DPT"] = "-1"
            if log["DPT"] not in log_folder[log["SRC"]]:
                log_folder[log["SRC"]][log["DPT"]] = [ log, ]
            else:
                log_folder[log["SRC"]][log["DPT"]].append(log)


        print("Hosts : %s" % ", ".join(ip for ip in log_folder.keys()))
        for src, ports in log_folder.items():
            print("Host %s" % src)
            for dpt, logs in ports.items():
                age = str(now - logs[0]["DATE"]).split(".")[0]
                if dpt == "-1":
                    # These packets don't have any destination port.
                    # We'll print the first, and any variations on it.
                    variations = []
                    for log in logs[1:]:
                        for key in log:
                            if key in ("DATE", "ID"):
                                continue
                            if log[key] != logs[0][key]:
                                variations += (key, log[key])
                    # Delete "DPT" key as it's not a relevant value :
                    del logs[0]["DPT"]
                    print("  sent %i unknow packet(s) until %s ago :" %
                            (len(logs), age))
                    del logs[0]["DATE"]
                    del logs[0]["SRC"]
                    for key, value in logs[0].items():
                        print("    %s: %s" % (key, value))
                    if variations:
                        print("  variations :")
                        for var in variations:
                            print("    " + var)
                else:
                    print("  asked %i times for port %s until %s ago" %
                        (len(logs), dpt, age))

    def log_yielder(period=""):
        """get logs we implemented in iptables from journald"""
        reader = journal.Reader()
        reader.log_level(journal.LOG_WARNING)
        reader.add_match(SYSLOG_IDENTIFIER="kernel")
        now = datetime.datetime.today()
        #p = select.poll()
        #p.register(reader, reader.get_events())
        #p.poll()
        reader.seek_tail()
        while True:
            log = reader.get_previous()
            # Quit if there's no message :
            if not "MESSAGE" in log:
                break
            # Quit if log older than period :
            if period:
                age = datetime.datetime.timestamp(now)
                        - datetime.datetime.timestamp(
                                log["__REALTIME_TIMESTAMP"]
                                )
                if age > period:
                    break
            # Only catch messages sent by iptables log :
            if log["MESSAGE"].startswith(program_name):
                message_dict = {}
                message = log["MESSAGE"].strip(program_name + ":").strip()
                message_dict["DATE"] = log["__REALTIME_TIMESTAMP"]
                for item in message.split():
                    if item.count("="):
                        key, value = item.split("=")
                        message_dict[key] = value
                    else:
                        message_dict[item] = ""
                yield message_dict


    parser = argparse.ArgumentParser()
    #parser.required = True
    # parser fails badly when invoked without argument ;
    # let's invoke basic help instead.
    parser.set_defaults(func=no_arg_provided)
    subparser = parser.add_subparsers()
    #subparser.required = True

    # create the parser for the "show" command
    parser_show = subparser.add_parser("show")
    show_subparser = parser_show.add_subparsers()

    # create the subparser for the "show status" command
    parser_show_status = show_subparser.add_parser(
        "status",
        help="show iptables rules controlled by this firewall"
    )
    parser_show_status.set_defaults(func=show_status)

    # create the subparser for the "show logs" command
    parser_show_logs = show_subparser.add_parser(
        "logs",
        help="show logs of firewall"
    )
    parser_show_logs.set_defaults(func=show_logs)
    show_logs_subparser = parser_show_logs.add_subparsers()
    parser_show_logs_time = show_logs_subparser.add_parser(
        "since",
        help="restrict logs to those since [period] seconds"
    )
    parser_show_logs_time.add_argument(
        "period",
    )
    parser_show_logs_time.set_defaults(func=show_logs)

    # create the subparser for the "show realms" command
    parser_show_realms = show_subparser.add_parser(
        "realms",
        help="show realm definitions"
    )
    parser_show_realms.set_defaults(func=show_realms)

    # create the subparser for the "show services" command
    parser_show_services = show_subparser.add_parser(
        "services",
        help="show services list"
    )
    parser_show_services.set_defaults(func=show_services)

    # create the subparser for the "show service SERVICE_NAME" command
    parser_show_service = show_subparser.add_parser(
        "service",
        # don't define help ; instead overwrite the usage because
        # it prints the possible arguments twice, which is way too long
        help="prints the service definition",
        # TODO could tell to search for services with braise show services
        # and then don't display "positional arguments" - see
        # https://docs.python.org/3.2/library/argparse.html#formatter-class
        usage="%s %s service_name - prints the service definition" %
        (parser_show.prog, "service")
    )
    parser_show_service.add_argument(
        "service_name",
        nargs="*",
        #choices=[ name.split() for name in service_defs ],
        #help=""
    )
    parser_show_service.set_defaults(func=show_service)


    # create the parser for the "add" command
    parser_add = subparser.add_parser("add")
    # create the subparser for the "add service" command
    add_subparser = parser_add.add_subparsers()
    parser_add_service = add_subparser.add_parser(
        "service",
        usage="%s service service_name - add a service to authorized list" %
        parser_add.prog
    )
    parser_add_service.add_argument(
        "service_name",
        nargs="*",
    )
    parser_add_service.set_defaults(func=add_service)

    # create the parser for the "del" command
    parser_del = subparser.add_parser("del")
    # create the subparser for the "del service" command
    del_subparser = parser_del.add_subparsers()
    parser_del_service = del_subparser.add_parser(
        "service",
        usage="%s service service_name - remove a service from authorized list" %
        parser_del.prog
    )
    parser_del_service.add_argument(
        "service_name",
        nargs="*",
    )
    parser_del_service.set_defaults(func=del_service)


    args = parser.parse_args()
    args.func(args)



