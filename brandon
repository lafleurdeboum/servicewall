#!/usr/bin/env bash


# This script uses ufw to build an adaptative firewall that allows services on the local network only.
# Beware that ufw silently allows the following ports by default - see
# /etc/ufw/before.rules
# /etc/ufw/after.rules

# ufw-before-input :
# 5353/udp			avahi/mDNS/Bonjour to 224.0.0.251	DISABLED
# 1900/udp			SSDP for upnp to 239.255.255.250 	DISABLED
# icmptype 3 4 11 12 8		ping
# 67/udp, 68/udp		DHCP/bootp

# ufw-after-input :
# 137/udp			NetBIOS name service			DISABLED
# 138/udp			NetBIOS datagram service		DISABLED
# 139/tcp			NetBIOS session service			DISABLED
# 445/tcp			SMB/samba				DISABLED
# 67/udp, 68/udp		DHCP/bootp again


function bailout {
  echo -e "$1"
  exit 1
}

# TODO could be done with ufw application definitions - see
# https://wiki.archlinux.org/index.php/Uncomplicated_Firewall#Adding_other_applications

# Bash 4 dictionaries - list of services to enable locally
declare -A local_services

local_services=(
  #["ssh"]="22/tcp" # allowed by default for any host
  #["Transmission"]="51413/tcp" # allowed by default for any host
  #["Skype"]="443/tcp" # allowed by default for any host
  ["http"]="80/tcp"
  ["upnp"]="80 5431 1900/udp 49152"
  ["samba"]="445/tcp" # already done silently by ufw
  ["netbios"]="137/udp 138/udp 139/tcp" # already done silently by ufw
  ["avahi"]="5353/udp 5298" # already done silently by ufw
  #["avahi-daemon"]="38400/udp" # do I really need this ?
)

if test "$UID" -ne "0"; then
  bailout "\nyou are not root"
fi
if test "$#" -ne "2"; then
  echo -e "\nwrong number of arguments"
  bailout "usage : $0 iface up|down"
fi

iface=$1
action=$2
logfile=/tmp/brandon.log
subnetfile=/etc/brandon/subnet

case $action in
  up)
    date >> $logfile
    echo "arguments : $@" >> $logfile

    # Determine subnet
    # at home, is 192.168.1.0 | the trailing 0s indicate the netmask
    buffer=$(ip address show $iface | head -n 3 | tail -n 1)
    network_realm=$(echo $buffer | awk '{ print $4 }' | sed 's/255/0/g')
    netmask=$(echo $buffer | awk '{ print $2 }' | cut -d'/' -f 2)
    subnet="$network_realm/$netmask"

    if test -z "$subnet"; then
      rm "$subnetfile"
      bailout "no subnet found"
    else
      echo $subnet > $subnetfile
    fi
    echo -n 'authorizing for realm' $subnet ':'

    # iterate over the keys of the hash table :
    for service in "${!local_services[@]}"; do
      echo -n " $service"
      dests=${local_services[$service]}
      for dest in $dests; do
        port=$(echo $dest | awk -F/ '{print $1}')
        proto=$(echo $dest | awk -F/ '{print $2}')
        if test -n $proto; then
          ufw allow in from $subnet to any port $port comment $service > /dev/null
        else
          ufw allow in proto $proto from $subnet to any port $port comment $service > /dev/null
        fi
      done
    done
    ufw reload > /dev/null
    echo # a newline
    ;;

  down)
    date >> $logfile
    echo "arguments : $@" >> $logfile
    if test -f "$subnetfile"; then
      subnet=$(cat "$subnetfile")
      rm "$subnetfile"
    else
      bailout "no subnet registered - $0 was probably not started properly - quitting"
    fi
    if test -z "$subnet"; then
      bailout "no subnet found"
    fi
    echo -n 'unauthorizing for realm' $subnet ':'
    # Let's pray the subnet hasn't changed - but if it had, we would have been
    # called at that moment, right ?
    for service in "${!local_services[@]}"; do
      echo -n " $service"
      dests=${local_services[$service]}
      for dest in $dests; do
        port=$(echo $dest | awk -F/ '{print $1}')
        proto=$(echo $dest | awk -F/ '{print $2}')
        if test -n $proto; then
          ufw delete allow in from $subnet to any port $port comment $service > /dev/null
        else
          ufw delete allow in proto $proto from $subnet to any port $port comment $service > /dev/null
        fi
      done
    done
    ufw reload > /dev/null
    echo # a newline
    ;;
  connectivity-change)
    $0 $iface down
    $0 $iface up
    ;;
  *)
    echo $(date) called with $@ >> $logfile
    bailout "\nusage : $0 iface up|down"
    ;;
esac
